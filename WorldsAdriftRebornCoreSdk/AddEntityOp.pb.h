// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AddEntityOp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AddEntityOp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AddEntityOp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AddEntityOp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AddEntityOp_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AddEntityOp_2eproto;
namespace WorldsAdriftRebornCoreSdk {
class AddEntityOp;
struct AddEntityOpDefaultTypeInternal;
extern AddEntityOpDefaultTypeInternal _AddEntityOp_default_instance_;
}  // namespace WorldsAdriftRebornCoreSdk
PROTOBUF_NAMESPACE_OPEN
template<> ::WorldsAdriftRebornCoreSdk::AddEntityOp* Arena::CreateMaybeMessage<::WorldsAdriftRebornCoreSdk::AddEntityOp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace WorldsAdriftRebornCoreSdk {

// ===================================================================

class AddEntityOp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorldsAdriftRebornCoreSdk.AddEntityOp) */ {
 public:
  inline AddEntityOp() : AddEntityOp(nullptr) {}
  ~AddEntityOp() override;
  explicit PROTOBUF_CONSTEXPR AddEntityOp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddEntityOp(const AddEntityOp& from);
  AddEntityOp(AddEntityOp&& from) noexcept
    : AddEntityOp() {
    *this = ::std::move(from);
  }

  inline AddEntityOp& operator=(const AddEntityOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddEntityOp& operator=(AddEntityOp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddEntityOp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddEntityOp* internal_default_instance() {
    return reinterpret_cast<const AddEntityOp*>(
               &_AddEntityOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddEntityOp& a, AddEntityOp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddEntityOp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddEntityOp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddEntityOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddEntityOp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddEntityOp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddEntityOp& from) {
    AddEntityOp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddEntityOp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorldsAdriftRebornCoreSdk.AddEntityOp";
  }
  protected:
  explicit AddEntityOp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefabNameFieldNumber = 2,
    kPrefabContextFieldNumber = 3,
    kEntityIdFieldNumber = 1,
  };
  // optional string PrefabName = 2;
  bool has_prefabname() const;
  private:
  bool _internal_has_prefabname() const;
  public:
  void clear_prefabname();
  const std::string& prefabname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefabname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefabname();
  PROTOBUF_NODISCARD std::string* release_prefabname();
  void set_allocated_prefabname(std::string* prefabname);
  private:
  const std::string& _internal_prefabname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefabname(const std::string& value);
  std::string* _internal_mutable_prefabname();
  public:

  // optional string PrefabContext = 3;
  bool has_prefabcontext() const;
  private:
  bool _internal_has_prefabcontext() const;
  public:
  void clear_prefabcontext();
  const std::string& prefabcontext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefabcontext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefabcontext();
  PROTOBUF_NODISCARD std::string* release_prefabcontext();
  void set_allocated_prefabcontext(std::string* prefabcontext);
  private:
  const std::string& _internal_prefabcontext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefabcontext(const std::string& value);
  std::string* _internal_mutable_prefabcontext();
  public:

  // optional int64 EntityId = 1;
  bool has_entityid() const;
  private:
  bool _internal_has_entityid() const;
  public:
  void clear_entityid();
  int64_t entityid() const;
  void set_entityid(int64_t value);
  private:
  int64_t _internal_entityid() const;
  void _internal_set_entityid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:WorldsAdriftRebornCoreSdk.AddEntityOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefabname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefabcontext_;
    int64_t entityid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AddEntityOp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddEntityOp

// optional int64 EntityId = 1;
inline bool AddEntityOp::_internal_has_entityid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AddEntityOp::has_entityid() const {
  return _internal_has_entityid();
}
inline void AddEntityOp::clear_entityid() {
  _impl_.entityid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t AddEntityOp::_internal_entityid() const {
  return _impl_.entityid_;
}
inline int64_t AddEntityOp::entityid() const {
  // @@protoc_insertion_point(field_get:WorldsAdriftRebornCoreSdk.AddEntityOp.EntityId)
  return _internal_entityid();
}
inline void AddEntityOp::_internal_set_entityid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.entityid_ = value;
}
inline void AddEntityOp::set_entityid(int64_t value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:WorldsAdriftRebornCoreSdk.AddEntityOp.EntityId)
}

// optional string PrefabName = 2;
inline bool AddEntityOp::_internal_has_prefabname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AddEntityOp::has_prefabname() const {
  return _internal_has_prefabname();
}
inline void AddEntityOp::clear_prefabname() {
  _impl_.prefabname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AddEntityOp::prefabname() const {
  // @@protoc_insertion_point(field_get:WorldsAdriftRebornCoreSdk.AddEntityOp.PrefabName)
  return _internal_prefabname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddEntityOp::set_prefabname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.prefabname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WorldsAdriftRebornCoreSdk.AddEntityOp.PrefabName)
}
inline std::string* AddEntityOp::mutable_prefabname() {
  std::string* _s = _internal_mutable_prefabname();
  // @@protoc_insertion_point(field_mutable:WorldsAdriftRebornCoreSdk.AddEntityOp.PrefabName)
  return _s;
}
inline const std::string& AddEntityOp::_internal_prefabname() const {
  return _impl_.prefabname_.Get();
}
inline void AddEntityOp::_internal_set_prefabname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.prefabname_.Set(value, GetArenaForAllocation());
}
inline std::string* AddEntityOp::_internal_mutable_prefabname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.prefabname_.Mutable(GetArenaForAllocation());
}
inline std::string* AddEntityOp::release_prefabname() {
  // @@protoc_insertion_point(field_release:WorldsAdriftRebornCoreSdk.AddEntityOp.PrefabName)
  if (!_internal_has_prefabname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.prefabname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefabname_.IsDefault()) {
    _impl_.prefabname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AddEntityOp::set_allocated_prefabname(std::string* prefabname) {
  if (prefabname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.prefabname_.SetAllocated(prefabname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefabname_.IsDefault()) {
    _impl_.prefabname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WorldsAdriftRebornCoreSdk.AddEntityOp.PrefabName)
}

// optional string PrefabContext = 3;
inline bool AddEntityOp::_internal_has_prefabcontext() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AddEntityOp::has_prefabcontext() const {
  return _internal_has_prefabcontext();
}
inline void AddEntityOp::clear_prefabcontext() {
  _impl_.prefabcontext_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AddEntityOp::prefabcontext() const {
  // @@protoc_insertion_point(field_get:WorldsAdriftRebornCoreSdk.AddEntityOp.PrefabContext)
  return _internal_prefabcontext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddEntityOp::set_prefabcontext(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.prefabcontext_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WorldsAdriftRebornCoreSdk.AddEntityOp.PrefabContext)
}
inline std::string* AddEntityOp::mutable_prefabcontext() {
  std::string* _s = _internal_mutable_prefabcontext();
  // @@protoc_insertion_point(field_mutable:WorldsAdriftRebornCoreSdk.AddEntityOp.PrefabContext)
  return _s;
}
inline const std::string& AddEntityOp::_internal_prefabcontext() const {
  return _impl_.prefabcontext_.Get();
}
inline void AddEntityOp::_internal_set_prefabcontext(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.prefabcontext_.Set(value, GetArenaForAllocation());
}
inline std::string* AddEntityOp::_internal_mutable_prefabcontext() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.prefabcontext_.Mutable(GetArenaForAllocation());
}
inline std::string* AddEntityOp::release_prefabcontext() {
  // @@protoc_insertion_point(field_release:WorldsAdriftRebornCoreSdk.AddEntityOp.PrefabContext)
  if (!_internal_has_prefabcontext()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.prefabcontext_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefabcontext_.IsDefault()) {
    _impl_.prefabcontext_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AddEntityOp::set_allocated_prefabcontext(std::string* prefabcontext) {
  if (prefabcontext != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.prefabcontext_.SetAllocated(prefabcontext, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefabcontext_.IsDefault()) {
    _impl_.prefabcontext_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WorldsAdriftRebornCoreSdk.AddEntityOp.PrefabContext)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace WorldsAdriftRebornCoreSdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AddEntityOp_2eproto
