// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AssetLoadRequestOp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AssetLoadRequestOp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AssetLoadRequestOp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AssetLoadRequestOp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AssetLoadRequestOp_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AssetLoadRequestOp_2eproto;
namespace WorldsAdriftRebornCoreSdk {
class AssetLoadRequestOp;
struct AssetLoadRequestOpDefaultTypeInternal;
extern AssetLoadRequestOpDefaultTypeInternal _AssetLoadRequestOp_default_instance_;
}  // namespace WorldsAdriftRebornCoreSdk
PROTOBUF_NAMESPACE_OPEN
template<> ::WorldsAdriftRebornCoreSdk::AssetLoadRequestOp* Arena::CreateMaybeMessage<::WorldsAdriftRebornCoreSdk::AssetLoadRequestOp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace WorldsAdriftRebornCoreSdk {

// ===================================================================

class AssetLoadRequestOp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp) */ {
 public:
  inline AssetLoadRequestOp() : AssetLoadRequestOp(nullptr) {}
  ~AssetLoadRequestOp() override;
  explicit PROTOBUF_CONSTEXPR AssetLoadRequestOp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssetLoadRequestOp(const AssetLoadRequestOp& from);
  AssetLoadRequestOp(AssetLoadRequestOp&& from) noexcept
    : AssetLoadRequestOp() {
    *this = ::std::move(from);
  }

  inline AssetLoadRequestOp& operator=(const AssetLoadRequestOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetLoadRequestOp& operator=(AssetLoadRequestOp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetLoadRequestOp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetLoadRequestOp* internal_default_instance() {
    return reinterpret_cast<const AssetLoadRequestOp*>(
               &_AssetLoadRequestOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AssetLoadRequestOp& a, AssetLoadRequestOp& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetLoadRequestOp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetLoadRequestOp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetLoadRequestOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetLoadRequestOp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssetLoadRequestOp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AssetLoadRequestOp& from) {
    AssetLoadRequestOp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetLoadRequestOp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorldsAdriftRebornCoreSdk.AssetLoadRequestOp";
  }
  protected:
  explicit AssetLoadRequestOp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetTypeFieldNumber = 1,
    kNameFieldNumber = 2,
    kContextFieldNumber = 3,
    kUrlFieldNumber = 4,
  };
  // optional string AssetType = 1;
  bool has_assettype() const;
  private:
  bool _internal_has_assettype() const;
  public:
  void clear_assettype();
  const std::string& assettype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_assettype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_assettype();
  PROTOBUF_NODISCARD std::string* release_assettype();
  void set_allocated_assettype(std::string* assettype);
  private:
  const std::string& _internal_assettype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_assettype(const std::string& value);
  std::string* _internal_mutable_assettype();
  public:

  // optional string Name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string Context = 3;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const std::string& context() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_context(ArgT0&& arg0, ArgT... args);
  std::string* mutable_context();
  PROTOBUF_NODISCARD std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // optional string Url = 4;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assettype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AssetLoadRequestOp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AssetLoadRequestOp

// optional string AssetType = 1;
inline bool AssetLoadRequestOp::_internal_has_assettype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AssetLoadRequestOp::has_assettype() const {
  return _internal_has_assettype();
}
inline void AssetLoadRequestOp::clear_assettype() {
  _impl_.assettype_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AssetLoadRequestOp::assettype() const {
  // @@protoc_insertion_point(field_get:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.AssetType)
  return _internal_assettype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssetLoadRequestOp::set_assettype(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.assettype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.AssetType)
}
inline std::string* AssetLoadRequestOp::mutable_assettype() {
  std::string* _s = _internal_mutable_assettype();
  // @@protoc_insertion_point(field_mutable:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.AssetType)
  return _s;
}
inline const std::string& AssetLoadRequestOp::_internal_assettype() const {
  return _impl_.assettype_.Get();
}
inline void AssetLoadRequestOp::_internal_set_assettype(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.assettype_.Set(value, GetArenaForAllocation());
}
inline std::string* AssetLoadRequestOp::_internal_mutable_assettype() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.assettype_.Mutable(GetArenaForAllocation());
}
inline std::string* AssetLoadRequestOp::release_assettype() {
  // @@protoc_insertion_point(field_release:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.AssetType)
  if (!_internal_has_assettype()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.assettype_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assettype_.IsDefault()) {
    _impl_.assettype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AssetLoadRequestOp::set_allocated_assettype(std::string* assettype) {
  if (assettype != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.assettype_.SetAllocated(assettype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assettype_.IsDefault()) {
    _impl_.assettype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.AssetType)
}

// optional string Name = 2;
inline bool AssetLoadRequestOp::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AssetLoadRequestOp::has_name() const {
  return _internal_has_name();
}
inline void AssetLoadRequestOp::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AssetLoadRequestOp::name() const {
  // @@protoc_insertion_point(field_get:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssetLoadRequestOp::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.Name)
}
inline std::string* AssetLoadRequestOp::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.Name)
  return _s;
}
inline const std::string& AssetLoadRequestOp::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AssetLoadRequestOp::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AssetLoadRequestOp::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AssetLoadRequestOp::release_name() {
  // @@protoc_insertion_point(field_release:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AssetLoadRequestOp::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.Name)
}

// optional string Context = 3;
inline bool AssetLoadRequestOp::_internal_has_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AssetLoadRequestOp::has_context() const {
  return _internal_has_context();
}
inline void AssetLoadRequestOp::clear_context() {
  _impl_.context_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AssetLoadRequestOp::context() const {
  // @@protoc_insertion_point(field_get:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.Context)
  return _internal_context();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssetLoadRequestOp::set_context(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.context_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.Context)
}
inline std::string* AssetLoadRequestOp::mutable_context() {
  std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.Context)
  return _s;
}
inline const std::string& AssetLoadRequestOp::_internal_context() const {
  return _impl_.context_.Get();
}
inline void AssetLoadRequestOp::_internal_set_context(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.context_.Set(value, GetArenaForAllocation());
}
inline std::string* AssetLoadRequestOp::_internal_mutable_context() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.context_.Mutable(GetArenaForAllocation());
}
inline std::string* AssetLoadRequestOp::release_context() {
  // @@protoc_insertion_point(field_release:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.Context)
  if (!_internal_has_context()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.context_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AssetLoadRequestOp::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.context_.SetAllocated(context, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.Context)
}

// optional string Url = 4;
inline bool AssetLoadRequestOp::_internal_has_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AssetLoadRequestOp::has_url() const {
  return _internal_has_url();
}
inline void AssetLoadRequestOp::clear_url() {
  _impl_.url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AssetLoadRequestOp::url() const {
  // @@protoc_insertion_point(field_get:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.Url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssetLoadRequestOp::set_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.Url)
}
inline std::string* AssetLoadRequestOp::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.Url)
  return _s;
}
inline const std::string& AssetLoadRequestOp::_internal_url() const {
  return _impl_.url_.Get();
}
inline void AssetLoadRequestOp::_internal_set_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* AssetLoadRequestOp::_internal_mutable_url() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* AssetLoadRequestOp::release_url() {
  // @@protoc_insertion_point(field_release:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.Url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AssetLoadRequestOp::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WorldsAdriftRebornCoreSdk.AssetLoadRequestOp.Url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace WorldsAdriftRebornCoreSdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AssetLoadRequestOp_2eproto
